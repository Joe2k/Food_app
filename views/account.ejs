<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no,maximum-scale=1,user-scalable=no">
    <title>My Account</title>
    <link rel="stylesheet" href="/home_assets/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Catamaran:100,200,300,400,500,600,700,800,900">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato:100,100i,300,300i,400,400i,700,700i,900,900i">
    <link rel="stylesheet" href="/home_assets/home_css/untitled.css">
    <link rel="stylesheet" href="/css/styles.css">
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
    <link rel="stylesheet" href="leaflet-routing-machine.css" />
    <style>
        .map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;

        }

    </style>
</head>

<body>
<nav class="navbar navbar-dark navbar-expand-lg fixed-top bg-dark navbar-custom" style="color: rgb(194,74,74);background-color: rgb(255,255,255);">
    <div class="container"><a class="navbar-brand" href="/home">FOoD</a><button data-toggle="collapse" class="navbar-toggler" data-target="#navbarResponsive"><span class="navbar-toggler-icon"></span></button>
        <div class="collapse navbar-collapse" id="navbarResponsive" style="color: rgb(242,0,0);">
            <ul class="nav navbar-nav ml-auto">
                <li class="nav-item" role="presentation"><a class="nav-link" href="/sell">Sell</a></li>
                <li class="nav-item" role="presentation"><a class="nav-link" href="/buy" style="color: rgba(255,255,255,0.5);">Buy</a></li>
            </ul>
        </div>
    </div>
</nav>
<header class="masthead text-center text-white">
    <div class="masthead-content">
        <div class="container">
            <h1 class="masthead-heading mb-0">My Account</h1>
            <h2 class="masthead-subheading mb-0">Hi <%=newname%></h2>
        </div>
    </div>
    <div class="bg-circle-1 bg-circle"></div>
    <div class="bg-circle-2 bg-circle"></div>
    <div class="bg-circle-3 bg-circle"></div>
    <div class="bg-circle-4 bg-circle"></div>
</header>
<section class="container">
    <h2>Sold Items</h2>
    <div class="container">
        <div class="table-responsive border rounded-0 border-primary shadow-lg" style="margin: 20px 0px;border-style: dotted;">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th class="text-center">Name</th>
                </tr>
                </thead>
                <tbody>

                    <%for(var i=0;i<docs.selling.length;i++){%>
                    <tr>
                    <td class="text-center"><%=docs.selling[i]%></td>
                    </tr>
                        <%}%>

                <tr></tr>
                </tbody>
            </table>
        </div>
    </div>


    <h2>Bought Items</h2>

    <div class="container">
        <div class="table-responsive border rounded-0 border-primary shadow-lg" style="margin: 20px 0px;border-style: dotted;">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th class="text-center">Name</th>
                    <th class="text-center">Qty</th>
                </tr>
                </thead>
                <tbody style="position: relative;>
                    <%var j=0;%>
                        <%var k=0;%>
                    <%for(var i=0;i<docs.orders.length;i++){%>
                    <%for(const property in docs.orders[i]){%>
                    <%if(property!="total"){%>
                    <tr style="position: relative;">
                    <td class="text-center"><%=property%></td>
                    <td class="text-center"><%=docs.orders[i][property]%></td>
                    </tr>
                    <input id="lat<%=k%>" value="<%=docs.orderLocations[j]%>" hidden>
                    <%j++;%>
                    <input id="long<%=k%>" value="<%=docs.orderLocations[j]%>" hidden>
                    <%j++;%>
                    <input id="name<%=k%>" value="<%=property%>" hidden>
                <tr>
                    <td>
                    <div style="position: relative; width: 90%;height:250px;" class="container"><div class="map" id='map<%=k%>'></div>
                        <%k++;%>
                    </div>
                    </td>
                </tr>
                    <%}%>
                    <%}%>
                    <%}%>
                <input id="num" value="<%=k%>" hidden>
                <input id="username" value="<%=userName%>" hidden>
                </tbody>
            </table>
        </div>
    </div>


    <div class="text-center" style="padding-bottom: 30px;">
    <a href="/home" class="text-center" style="margin-right: auto; margin-left: auto;box-sizing: content-box;">
    <button class="btn btn-primary " type="button"><svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-arrow-left" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
            </svg>  &nbsp;Go Back</button></a></div>
<input id="userLat" name="userLat" value="<%=userLat%>" hidden>
    <input id="userLong" name="userLong" value="<%=userLong%>" hidden>

</section>
<footer class="bg-black" style="padding-top: 30px;padding-bottom: 30px;">
    <div class="container">
        <p class="text-center text-white m-0 small">Made with <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-heart-fill" fill="red" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
            </svg>  by Jonathan</p>
    </div>
</footer>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
<script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
<script src="leaflet-routing-machine.js"></script>
<script type="text/javascript">
    $(document).on('click','.navbar-collapse',function(e) {
        if( $(e.target).is('a') ) {
            $(this).collapse('hide');
        }
    });
    $(document).ready(function (){
        $(".leaflet-routing-container").hide();

    });


    let map=[];
    let lats=[];
    let longs=[];
    let itemNames=[];
    let userName=$("#username")[0].value;
    let ite=$("#num")[0].value;
    let routes=[];
    //console.log(userName,ite);
    for(var i=0;i<$("#num")[0].value;i++){
        map[i] = L.map('map'+i);
        lats[i]=$("#lat"+i)[0].value;
        longs[i]=$("#long"+i)[0].value;
        itemNames[i]=$("#name"+i)[0].value;
        // L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        //     attribution: '© OpenStreetMap contributors'
        // }).addTo(map);

        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1Ijoiam9lMmsiLCJhIjoiY2tmanA4bXM2MGtoYTJ0bjRpZ2UxYjl2bCJ9.ntM43CJhueGaDhqGQY4J3g', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox/streets-v11',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: 'pk.eyJ1Ijoiam9lMmsiLCJhIjoiY2tmanA4bXM2MGtoYTJ0bjRpZ2UxYjl2bCJ9.ntM43CJhueGaDhqGQY4J3g'
        }).addTo(map[i]);

        routes[i]=L.Routing.control({
            waypoints: [
                L.latLng($("#userLat")[0].value, $("#userLong")[0].value),
                L.latLng($("#lat"+i)[0].value, $("#long"+i)[0].value)
            ],
            createMarker: function() { return null; },
            routeWhileDragging: true,
            lineOptions: {styles:[{color: 'black', opacity: 0.15, weight: 10}, {color: 'white', opacity: 0.8, weight: 9}, {color: 'red', opacity: 1, weight: 5}]}
        }).addTo(map[i]);



        var homeIcon = L.icon({
            iconUrl: '/home.png',
            iconSize: [28, 40],

            popupAnchor: [-3, -76]
        });
        var shopIcon = L.icon({
            iconUrl: '/cooking.png',
            iconSize: [28, 40],

            popupAnchor: [-3, -76]
        });

        L.marker([$("#userLat")[0].value, $("#userLong")[0].value],{icon: homeIcon}).addTo(map[i]);
        L.marker([$("#lat"+i)[0].value, $("#long"+i)[0].value],{icon: shopIcon}).addTo(map[i]);
    }

  async function getTheLocation(map){
        for(var i=0;i<ite;i++) {
            console.log("hi");
            // fetch("/deliveryApi").then(response => {
            //     console.log(response.json());
            // });
            const details={
                itemName:itemNames[i],
                userName:userName
            }

                const options = {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                        // 'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: JSON.stringify(details)
                }
                console.log("hi2");
                const response = await fetch("/getdeliveryApi", options);
                const data = await response.json();
                console.log(data);
                if(data.active===true && data.delivered===false)
                {
                    //console.log("hi");
                    routes[i].spliceWaypoints(0,2);
                    routes[i]=L.Routing.control({
                        waypoints: [
                            L.latLng($("#userLat")[0].value, $("#userLong")[0].value),
                            L.latLng(data.delLat, data.delLong)
                        ],
                        createMarker: function() { return null; },
                        routeWhileDragging: true,
                        lineOptions: {styles:[{color: 'black', opacity: 0.15, weight: 10}, {color: 'white', opacity: 0.8, weight: 9}, {color: 'red', opacity: 1, weight: 5}]}
                    }).addTo(map[i]);

                    var foodIcon = L.icon({
                        iconUrl: '/food-delivery.png',
                        iconSize: [28, 40],

                        popupAnchor: [-3, -76]
                    });

                    L.marker([data.delLat, data.delLong],{icon: foodIcon}).addTo(map[i]);
                    $(".leaflet-routing-container").hide();
                }









        }

    }

    const asyncIntervals = [];

    const runAsyncInterval = async (cb, interval, intervalIndex) => {
        await cb();
        if (asyncIntervals[intervalIndex]) {
            setTimeout(() => runAsyncInterval(cb, interval, intervalIndex), interval);
        }
    };

    const setAsyncInterval = (cb, interval) => {
        if (cb && typeof cb === "function") {
            const intervalIndex = asyncIntervals.length;
            asyncIntervals.push(true);
            runAsyncInterval(cb, interval, intervalIndex);
            return intervalIndex;
        } else {
            throw new Error('Callback must be a function');
        }
    };

    const clearAsyncInterval = (intervalIndex) => {
        if (asyncIntervals[intervalIndex]) {
            asyncIntervals[intervalIndex] = false;
        }
    };
    // for(var j=0;j<10;j++)
    //     getTheLocation(map);
    //     setAsyncInterval(getTheLocation(map),1000);
    //getTheLocation(map,lats,longs);
    getTheLocation(map);
    setInterval(()=>{
        getTheLocation(map);
    },10000);




</script>
</body>
</html>